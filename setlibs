#! /bin/bash
#
# michael cousins
# http://www.github.com/mcous/kicad-lib
# this script file released into the public domain

# setlibs: adds or replaces the libraries of a kicad project with these libraries
#   usage: setlibs [flags] /path/to/project.pro [/paths/to/more/projects.pro]
#   flags: 
# TODO:-a, --append      = append libraries rather than replacing them
# TODO:-b, --before      = if appending, append new libraries before old ones (does not apply to power library)
#     -c, --components  = only do component files
#     -f, --footprints  = only do footprint files
#     -h, --help        = display this little summary
# TODO:-v, --version     = display version number of the library

# valid parameters
SHORT_FLAGS=("c" "f" "h")
LONG_FLAGS=("components" "footprints" "help")

# current program options
OPTS=()
PRJ=()

# functions
function input () {
  # parse input
  checkinput $@
  # if [ $1 ] && [ $2 ]
  #   then
  #   echo "i dunno"
  # elif [ $1 ]
  #   then
  #   run "--null" $1
  # else
  #   help
  # fi
}

# help function
function help () {
  echo "setlibs: adds or replaces the libraries of a kicad project using the libraries from github.com/mcous/kicad-lib"
  echo "  usage: setlibs [flags] /path/to/project.pro"
  echo "  flags: "
  echo "TODO:-a, --append      = append libraries rather than replacing them"
  echo "TODO:-p, --prepend     = prepend libraries rather than replacing (does not apply to power library)"
  echo "     -c, --components  = only do component files"
  echo "     -f, --footprints  = only do footprint files"
  echo "     -h, --help        = display this little summary"
  echo "TODO:-v, --version     = display version number of the library"
  return
}

# check the input to make sure that any options are correct and the file exists
function checkinput () {
  local inv=()

  local shortMatch="^-[a-z]{1}$"
  local longMatch="^-{2}[a-z][a-z]+$"
  local proMatch="[a-z]+\.pro$"

  for ARG in "$@"
  do
    echo "checking $ARG"
    local valid=false
    # check if its a short flag
    if [[ $ARG =~ $shortMatch ]]
      then
      # check if it's a valid short flag
      local flag=${ARG:1}
      for VALIDOPT in "${SHORT_FLAGS[@]}"
      do
        if [ "$flag" = "$VALIDOPT" ]
          then
          valid=true
          echo "adding $flag to OPTS"
          OPTS+=$VALIDOPT
          break
        fi
      done
      #echo "$flag is short option"

    # else check of its a long flag
    elif [[ $ARG =~ $longMatch ]]
      then
      # check if it's a valid long flag
      local flag=${ARG:2}
      for VALIDOPT in "${LONG_FLAGS[@]}"
      do
        if [ "$flag" = "$VALIDOPT" ]
          then
          echo "adding $flag to OPTS"
          OPTS+=$VALIDOPT
          break
        fi
      done
      #echo "$flag is long option"

    # else check if its a project file
    elif [[ $ARG =~ $proMatch ]]
      then
      # check if file exists
      if [ -e $ARG ]
        then
        PRJ+=$ARG
        valid=true
      else
        echo "$ARG does not exist"
      fi

    # else input is invalid
    #else
      #numInv+=1
    #  echo "$ARG is not valid input"
      #return
    fi

    if ! $valid
      then
      inv+="$ARG "
    fi
  done
  echo "Invalid inputs: $inv"
}

# check for conflicting options and set script flags
function checkopts () {
  echo "checking"
}

# do the magic
function run {
  echo "flags: $1"
  echo "project: $2"
}

# start the script
input $@

# program
#function run() {
# get list of component libraries from kicad-lib/components
# DEBUG - echo list
# TODO

# get list of footprint libraries from kicad-lib/footprints
# DEBUG - echo list
# TODO

# insert path to components into project file
# TODO

# insert path to footprints into project file
# TODO

# delete old component libraries in project file
# TODO

# delete old footprint libraries in project file
# TODO

# insert component libraries into project file
# TODO

# insert footprint libraries into project file
# TODO
#}
